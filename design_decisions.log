****************************
2024-05-24

In v7 JSON the workflow for new expressions is
1) user provides Latex expression
2) user provides SymPy expression
3) user provides symbols

The reason for that order was that the symbol detection was coming from SymPy's parsing of the Latex.

In v8 Neo4j the workflow is
1) user provides Latex expression
2) user provides symbols
3) user provides SymPy expression

The new sequence (symbols from latex-as-string first, then send to sympy) might be 
advantageous: if the symbols are identified first, that might make SymPy's parsing more likely to be right.

****************************
2024-05-24

In the v7 JSON implementation, the only way to create a new expression was to have the expression be associated with a specific derivation in a (new) step. The intent of this was to ensure there were no unconnected expressions. As a positive side-effect, associating a new expression with a derivation helped with guessing the symbols.

In the new (as of 2024) v8 Neo4j design, expressions can not be created during the specification of a derivation step. 
Now an expression has to be created prior to being referenced in a step. The value of separating these actions is that the interaction with the user is easier when processing one expression (rather than a bunch concurrently all related to the step).
Two consequences from this approach:
- guessing the symbols lacks context of a derivation
- expressions may be unconnected to a derivation step

Interestingly, in the v7 JSON implementation a user could add new symbols that were not referenced by any expression.

